{"ast":null,"code":"var _jsxFileName = \"/Users/drkrueger/Work/Solana/MekaMountPFP/web/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport querystring from 'query-string';\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport mekaHolder from './assets/meka.png';\nimport pfpHolder from './assets/pfp.png';\nimport download from 'downloadjs';\nimport './App.css'; //MUI stuff\n\nimport { Fab, Button, Avatar, List, ListItem, ListItemAvatar, ListItemText, DialogTitle, Dialog } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { createTheme } from '@mui/material/styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCoffee } from '@fortawesome/pro-regular-svg-icons'; //Sol Stuff\n\nimport { Connection, PublicKey, clusterApiUrl } from '@solana/web3.js';\nimport { Program, Provider, web3, BN } from '@project-serum/anchor';\nimport cjkp from './sol/keypair.json';\nimport idl from './sol/idl.json'; // SystemProgram is a reference to the Solana runtime!\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  SystemProgram,\n  Keypair\n} = web3; // Create a keypair for the account that will get our coffee jar\n\nconst secretArray = Object.values(cjkp._keypair.secretKey);\nconst secret = new Uint8Array(secretArray);\nconst coffeeJar = web3.Keypair.fromSecretKey(secret); // Get our program's id from the IDL file.\n\nconst programID = new PublicKey(idl.metadata.address); // Set our network to devnet.\n\nconst network = clusterApiUrl('mainnet-beta'); // Controls how we want to acknowledge when a transaction is \"done\".\n// In product use \"finalized\"\n\nconst opts = {\n  preflightCommitment: \"processed\"\n}; //MUI\n\nconst muiTheme = createTheme({\n  palette: {\n    primary: {\n      main: '#FF5C38'\n    }\n  }\n}); // Constants\n\nconst REAL_SERVER = '/server';\nconst TEST_SERVER = '';\nconst TEST_JSON = '\"proxy\": \"http://localhost:5000\"';\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst SERVER_PATH = REAL_SERVER;\n\nconst App = () => {\n  _s();\n\n  // State\n  const [creditsLeft, setCreditsLeft] = useState(0);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [isPfpFlipped, setIsPfpFlipped] = useState(false);\n  const [isMekFlipped, setIsMekFlipped] = useState(false);\n  const [isTwitterCropped, setIsTwitterCropped] = useState(true);\n  const [buildCount, setBuildCount] = useState(3);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [nftList, setNftList] = useState([]);\n  const [coffeeCount, setCoffeeCount] = useState(null);\n  const [solCount, setSolCount] = useState(null);\n  const [barista, setBarista] = useState(null);\n  const [coffeeOpen, setCoffeeOpen] = useState(false); // Sol Stuff\n\n  const LAMPORT_COST = 0.000000001;\n\n  const numFromRust = num => {\n    return num.toNumber();\n  };\n\n  const numToRust = num => {\n    return new BN(Math.round(num));\n  };\n\n  const solTolamports = sol => {\n    return Math.round(sol / LAMPORT_COST);\n  };\n\n  const lamportsToSol = lamports => {\n    return parseFloat((lamports * LAMPORT_COST).toFixed(5));\n  }; // Actions \n\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(connection, window.solana, opts.preflightCommitment);\n    return provider;\n  };\n\n  const loadCoffeeJar = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"🧮 Tabulating Info...\");\n      const account = await program.account.coffeeJar.fetch(coffeeJar.publicKey);\n      setCoffeeCount(account.coffeeCount.toNumber());\n      setSolCount(lamportsToSol(account.lamportCount));\n      setBarista(account.barista.toString());\n    } catch (error) {\n      console.log(\"Error getting coffee jar\", error);\n      setCoffeeCount(null);\n      setSolCount(lamportsToSol(null));\n      setBarista(null);\n    }\n  };\n\n  const buyCoffee = async sol => {\n    if (sol) {\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n        console.log(\"💲 Buying 0.1 Coffee...\");\n        await program.rpc.buyCoffee(numToRust(solTolamports(0.1)), {\n          accounts: {\n            coffeeJar: coffeeJar.publicKey,\n            from: provider.wallet.publicKey,\n            to: barista,\n            systemProgram: SystemProgram.programId\n          },\n          signers: [provider.wallet.Keypair]\n        });\n        await loadCoffeeJar();\n      } catch (error) {\n        console.log(\"Error sending sol \", error);\n      }\n    }\n  };\n\n  const createCoffeeJar = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"☕ Brewing Coffee...\");\n      await program.rpc.startCoffeeJar({\n        accounts: {\n          coffeeJar: coffeeJar.publicKey,\n          //Web  keypair\n          barista: provider.wallet.publicKey,\n          //User keypair\n          systemProgram: SystemProgram.programId\n        },\n        signers: [coffeeJar, provider.wallet.Keypair] //even though the barista is the payer, the coffeejar needs to sign this\n\n      });\n      await loadCoffeeJar();\n    } catch (error) {\n      console.log(\"Cannot get base account: \", error);\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const {\n        solana\n      } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({\n            onlyIfTrusted: true\n          });\n          console.log('Connected with Public Key:', response.publicKey.toString());\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const {\n      solana\n    } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  }; // UseEffects\n\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n      await getCreditsLeft();\n    };\n\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching NFTs...'); // Call Solana program here.\n\n      loadCoffeeJar();\n      grabAllNFTs(); // Set state\n      // setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]); // COFFEE\n\n  const buyACoffeeForCoach = () => {\n    handleClickOpen(); // if(walletAddress == null) {\n    //   connectWallet();\n    // } else if(coffeeCount == null){\n    //   createCoffeeJar();\n    // } else {\n    //   handleClickOpen();\n    // }\n  };\n\n  const buy1Coffee = () => {\n    buyCoffee(0.1);\n  }; // Web Stuff\n\n\n  const getURLData = function () {\n    let baseURL = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let path = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n    let params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let requestedURL = baseURL + path + (params.length == 0 ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {\n          'accept': 'application/json'\n        },\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer'\n      }).then(response => {\n        response.json().then(data => {\n          resolve(data);\n        }).catch(error => {\n          reject(`Could not get JSON (${requestedURL})`);\n        });\n      }).catch(error => {\n        reject(`Could not get URL (${requestedURL})`);\n      });\n    });\n  };\n\n  const grabAllNFTs = () => {\n    if (!isGettingNFTS) {\n      setIsGettingNFTs(true);\n      getURLData(\"https://public-api.solscan.io\", \"/account/tokens\", {\n        account: `${walletAddress}`\n      }).then(data => {\n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          if (token.tokenAmount != null && token.tokenAmount.amount == 1 && token.tokenAmount.decimals == 0) {\n            promises.push(getURLData(\"https://public-api.solscan.io\", `/account/${token.tokenAddress}`));\n          }\n        }); // Get Metadata on all\n\n        Promise.all(promises).then(nfts => {\n          //Grab only the useful stuff\n          let nftMetadata = [];\n          nfts.forEach(nft => {\n            try {\n              if (nft.metadata == null) {\n                throw new Error('No metadata');\n              }\n\n              if (nft.metadata.data.name == null) {\n                throw new Error('No name!');\n              }\n\n              if (nft.metadata.data.collection == null && nft.tokenInfo.symbol == null) {\n                throw new Error(nft.metadata.data.name + \" Bad collection\");\n              }\n\n              if (nft.metadata.data.image == null) {\n                throw new Error(nft.metadata.data.name + \" Bad image\");\n              }\n\n              if (nft.account == null) {\n                throw new Error(nft.metadata.data.name + \" Bad account\");\n              } //Fuck Collections\n\n\n              let collection = null;\n\n              if (nft.metadata.data.collection != null) {\n                if (typeof nft.metadata.data.collection === 'string') {\n                  collection = nft.metadata.data.collection;\n                } else {\n                  collection = nft.metadata.data.collection.name;\n                }\n              }\n\n              if (collection == null) collection = nft.tokenInfo.symbol;\n              if (collection == null) throw new Error(nft.metadata.data.name + \" Bad collection... Again\");\n              nftMetadata.push({\n                name: nft.metadata.data.name,\n                collection: collection,\n                url: nft.metadata.data.image,\n                address: nft.account\n              });\n            } catch (error) {\n              console.log(error);\n            }\n          }); //Sort\n\n          nftMetadata.sort((a, b) => {\n            return a.collection.localeCompare(b.collection);\n          }); //Update\n\n          setNftList(nftMetadata);\n          setIsGettingNFTs(false);\n        }).catch(error => {\n          alert('Could not grab ALL NFTs');\n          console.log(error);\n          setIsGettingNFTs(false);\n        });\n      }).catch(error => {\n        alert('Could not grab NFTs');\n        console.log(error);\n        setIsGettingNFTs(false);\n      });\n    } else {\n      console.log(\"Crawling...\");\n    }\n  };\n\n  const getCreditsLeft = async () => {\n    try {\n      const response = await fetch(`${SERVER_PATH}/credits`);\n      const data = await response.json();\n      setCreditsLeft(data.credits);\n    } catch {\n      console.log(\"Could not grab credits\");\n    }\n  };\n\n  const nukeIMG = async () => {\n    try {\n      const response = await fetch(`${SERVER_PATH}/nuke/${walletAddress}`);\n      const data = await response.json();\n      console.log(data);\n    } catch {\n      console.log(\"Could not nuke img\");\n    }\n  };\n\n  const isChosenMek = nft => {\n    isChosenImg(nft, mekAddress);\n  };\n\n  const isChosenPFP = nft => {\n    isChosenImg(nft, pfpAddress);\n  };\n\n  const isChosenImg = (nft, slot) => {\n    if (slot == null) return false;\n    if (nft == null) return false;\n    return nft.address == slot.address;\n  };\n\n  const getMekaName = () => {\n    let mek = mekAddress == null ? null : mekAddress.name;\n    let pfp = pfpAddress == null ? null : pfpAddress.name;\n    let name = mek == null ? ' ' : 'Meka-';\n    name += pfp == null ? ' ' : pfp.split(' ')[0];\n    return name;\n  };\n\n  const downloadNewMek = async () => {\n    if (creditsLeft <= 0) {\n      alert('No more community credits! Tweet @Coach Chuck to request more');\n    } else if (buildCount <= 0) {\n      alert('No more builds! (But... you could refresh...)');\n    } else if (mekAddress == null || pfpAddress == null) {\n      alert('Need to pick both a Mekamount and PFP');\n    } else if (!isBuilding) {\n      setIsBuilding(true);\n\n      try {\n        const response = await fetch(`${SERVER_PATH}/sol/${walletAddress}/meka/${mekAddress.address}/mekaflip/${isMekFlipped}/pfp/${pfpAddress.address}/pfpflip/${isPfpFlipped}/twittercrop/${isTwitterCropped}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if (blob.size < 500) {\n          const data = await response.json();\n\n          if (data.error != null) {\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        } else {\n          download(blob, getMekaName() + \".png\");\n          setBuildCount(buildCount - 1);\n          getCreditsLeft();\n          nukeIMG();\n        }\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  }; // Popups\n\n\n  const handleClickOpen = () => {\n    setCoffeeOpen(true);\n  };\n\n  const handleClose = () => {\n    setCoffeeOpen(false);\n  };\n\n  function BuyCoachACoffeePopup(props) {\n    const {\n      onClose,\n      open\n    } = props;\n\n    const handleClose = () => {\n      onClose();\n    };\n\n    return /*#__PURE__*/_jsxDEV(Dialog, {\n      onClose: handleClose,\n      open: open,\n      theme: muiTheme,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        children: \"Buy Coach A Coffee!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"contained\",\n        children: \"XXX\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 448,\n      columnNumber: 7\n    }, this);\n  }\n\n  BuyCoachACoffeePopup.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onOpen: PropTypes.bool.isRequired\n  }; // Renders\n\n  const selectNFT = nft => {\n    if (nft.name.includes(\"Mekamounts\")) {\n      setMekAddress(nft);\n    } else {\n      setPfpAddress(nft);\n    }\n  };\n\n  const mekSort = nft => {\n    return nft.name.includes(\"Mekamounts\");\n  };\n\n  const pfpSort = nft => {\n    return !nft.name.includes(\"Mekamounts\");\n  };\n\n  const getPFPList = sortFunction => {\n    return nftList.filter(sortFunction);\n  };\n\n  const renderNFTContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://www.magiceden.io/marketplace/mekamounts\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"file-name\",\n        children: getPFPList(mekSort).length > 0 ? \"Choose your Mekamount...\" : \"You have no Mekamounts... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 65\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 477,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: getPFPList(mekSort).map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        onClick: () => {\n          selectNFT(nft);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlay\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.url,\n            alt: nft.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: mekAddress == null ? 'selection-overlay' : mekAddress.address != nft.address ? 'selection-overlay' : 'selected'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 483,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: nft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 485,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mini-spacing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 486,\n          columnNumber: 13\n        }, this)]\n      }, nft.url, true, {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n      href: \"https://www.magiceden.io/marketplace/pesky_penguins\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"file-name\",\n        children: getPFPList(pfpSort).length > 0 ? \"Choose your PFP...\" : \"You have no PFPs...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 490,\n        columnNumber: 69\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif-grid\",\n      children: getPFPList(pfpSort).map(nft => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif-item\",\n        onClick: () => {\n          selectNFT(nft);\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlay\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: nft.url,\n            alt: nft.url\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 495,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: pfpAddress == null ? 'selection-overlay' : pfpAddress.address != nft.address ? 'selection-overlay' : 'selected'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 494,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: nft.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mini-spacing\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 13\n        }, this)]\n      }, nft.url, true, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 476,\n    columnNumber: 5\n  }, this);\n\n  const renderLoadingContainer = () => /*#__PURE__*/_jsxDEV(\"p\", {\n    className: \"file-name\",\n    children: \"Loading NFTs...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 507,\n    columnNumber: 5\n  }, this);\n\n  const renderTwitterCropSwitch = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"toggle-switch\",\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Crop for Twitter [\", `${isTwitterCropped}`, \"]\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"switch\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: isTwitterCropped,\n        onChange: () => setIsTwitterCropped(!isTwitterCropped)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 514,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"slider round\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 513,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 511,\n    columnNumber: 5\n  }, this);\n\n  const renderConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connected-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"selected-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flip-container\",\n          onClick: () => {\n            setIsMekFlipped(!isMekFlipped);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: isMekFlipped ? 'is-flipped' : 'can-flip',\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: mekAddress == null ? mekaHolder : mekAddress.url,\n              alt: mekaHolder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"sub-text\",\n              children: mekAddress == null ? \"\" : \"Mekamount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 531,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 528,\n          columnNumber: 11\n        }, this)\n      }, \"meka\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"selected-item\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flip-container\",\n          onClick: () => {\n            setIsPfpFlipped(!isPfpFlipped);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: isPfpFlipped ? 'is-flipped' : 'can-flip',\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: pfpAddress == null ? pfpHolder : pfpAddress.url,\n              alt: pfpHolder\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 538,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"sub-text\",\n              children: pfpAddress == null ? \"\" : \"PFP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 539,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 537,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 9\n        }, this)\n      }, \"pfp\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 535,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mini-spacing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text file-name\",\n      children: mekAddress == null || pfpAddress == null ? getMekaName() : getMekaName()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 545,\n      columnNumber: 7\n    }, this), renderTwitterCropSwitch(), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      className: \"cta-button submit-gif-button\",\n      onClick: downloadNewMek,\n      disabled: isBuilding,\n      children: isBuilding ? `Building...` : `Build [${buildCount}]`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 547,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"sub-text\",\n      children: [\"Hello \", walletAddress]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this), isGettingNFTS ? renderLoadingContainer() : renderNFTContainer(), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"spacing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 525,\n    columnNumber: 5\n  }, this);\n\n  const renderNotConnectedContainer = () => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"cta-button connect-wallet-button\",\n    onClick: connectWallet,\n    children: \"Connect to Wallet\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 558,\n    columnNumber: 5\n  }, this); // Main Page\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: walletAddress ? 'authed-container' : 'container',\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: \"\\uD83E\\uDDBE Mekamount PFP Portal \\uD83D\\uDC26\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 572,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"header\",\n          children: [\"[CR Left: \", creditsLeft, \"]\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 573,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"sub-text\",\n          children: \"N F T \\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 574,\n          columnNumber: 11\n        }, this), !walletAddress && renderNotConnectedContainer(), walletAddress && renderConnectedContainer()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 571,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spacing\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 581,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          alt: \"Twitter Logo\",\n          className: \"twitter-logo\",\n          src: twitterLogo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          className: \"footer-text\",\n          href: TWITTER_LINK,\n          target: \"_blank\",\n          rel: \"noreferrer\",\n          children: `Crafted By @${TWITTER_HANDLE}`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 570,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fab\",\n      children: /*#__PURE__*/_jsxDEV(Fab, {\n        color: \"primary\",\n        \"aria-label\": \"add\",\n        theme: muiTheme,\n        onClick: buyACoffeeForCoach,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faCoffee,\n          size: \"lg\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 594,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 593,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BuyCoachACoffeePopup, {\n      open: coffeeOpen,\n      onClose: handleClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 568,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"LcBVnVwVHQYBGYElTO8JninZT7w=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/drkrueger/Work/Solana/MekaMountPFP/web/src/App.js"],"names":["React","useEffect","useState","querystring","mekaHolder","pfpHolder","download","Fab","Button","Avatar","List","ListItem","ListItemAvatar","ListItemText","DialogTitle","Dialog","PropTypes","createTheme","FontAwesomeIcon","faCoffee","Connection","PublicKey","clusterApiUrl","Program","Provider","web3","BN","cjkp","idl","SystemProgram","Keypair","secretArray","Object","values","_keypair","secretKey","secret","Uint8Array","coffeeJar","fromSecretKey","programID","metadata","address","network","opts","preflightCommitment","muiTheme","palette","primary","main","REAL_SERVER","TEST_SERVER","TEST_JSON","TWITTER_HANDLE","TWITTER_LINK","SERVER_PATH","App","creditsLeft","setCreditsLeft","walletAddress","setWalletAddress","mekAddress","setMekAddress","pfpAddress","setPfpAddress","pfpScale","setPfpScale","isBuilding","setIsBuilding","isPfpFlipped","setIsPfpFlipped","isMekFlipped","setIsMekFlipped","isTwitterCropped","setIsTwitterCropped","buildCount","setBuildCount","isGettingNFTS","setIsGettingNFTs","nftList","setNftList","coffeeCount","setCoffeeCount","solCount","setSolCount","barista","setBarista","coffeeOpen","setCoffeeOpen","LAMPORT_COST","numFromRust","num","toNumber","numToRust","Math","round","solTolamports","sol","lamportsToSol","lamports","parseFloat","toFixed","getProvider","connection","provider","window","solana","loadCoffeeJar","program","console","log","account","fetch","publicKey","lamportCount","toString","error","buyCoffee","rpc","accounts","from","wallet","to","systemProgram","programId","signers","createCoffeeJar","startCoffeeJar","checkIfWalletIsConnected","isPhantom","response","connect","onlyIfTrusted","alert","connectWallet","onLoad","getCreditsLeft","addEventListener","removeEventListener","grabAllNFTs","buyACoffeeForCoach","handleClickOpen","buy1Coffee","getURLData","baseURL","path","params","requestedURL","length","stringify","Promise","resolve","reject","method","cache","headers","redirect","referrerPolicy","then","json","data","catch","promises","forEach","token","tokenAmount","amount","decimals","push","tokenAddress","all","nfts","nftMetadata","nft","Error","name","collection","tokenInfo","symbol","image","url","sort","a","b","localeCompare","credits","nukeIMG","isChosenMek","isChosenImg","isChosenPFP","slot","getMekaName","mek","pfp","split","downloadNewMek","blob","size","handleClose","BuyCoachACoffeePopup","props","onClose","open","propTypes","func","isRequired","onOpen","bool","selectNFT","includes","mekSort","pfpSort","getPFPList","sortFunction","filter","renderNFTContainer","map","renderLoadingContainer","renderTwitterCropSwitch","renderConnectedContainer","renderNotConnectedContainer","twitterLogo"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport querystring from 'query-string';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport mekaHolder from './assets/meka.png';\nimport pfpHolder from './assets/pfp.png';\nimport download from 'downloadjs';\nimport './App.css';\n\n//MUI stuff\nimport { Fab, Button, Avatar, List, ListItem, ListItemAvatar, ListItemText, DialogTitle, Dialog } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport { createTheme } from '@mui/material/styles';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCoffee } from '@fortawesome/pro-regular-svg-icons'\n\n//Sol Stuff\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport { Program, Provider, web3, BN } from '@project-serum/anchor';\n\nimport cjkp from './sol/keypair.json' \nimport idl from './sol/idl.json';\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will get our coffee jar\nconst secretArray = Object.values(cjkp._keypair.secretKey);\nconst secret = new Uint8Array(secretArray);\nconst coffeeJar = web3.Keypair.fromSecretKey(secret);\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl('mainnet-beta');\n\n// Controls how we want to acknowledge when a transaction is \"done\".\n// In product use \"finalized\"\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\n//MUI\nconst muiTheme = createTheme({\n  palette: {\n    primary: {\n      main: '#FF5C38',\n    },\n  },\n});\n\n// Constants\nconst REAL_SERVER = '/server';\nconst TEST_SERVER = '';\nconst TEST_JSON = '\"proxy\": \"http://localhost:5000\"';\nconst TWITTER_HANDLE = 'CoachChuckFF';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst SERVER_PATH = REAL_SERVER;\n\nconst App = () => {\n  // State\n  const [creditsLeft, setCreditsLeft] = useState(0);\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [mekAddress, setMekAddress] = useState(null);\n  const [pfpAddress, setPfpAddress] = useState(null);\n  const [pfpScale, setPfpScale] = useState(0.15);\n  const [isBuilding, setIsBuilding] = useState(false);\n  const [isPfpFlipped, setIsPfpFlipped] = useState(false);\n  const [isMekFlipped, setIsMekFlipped] = useState(false);\n  const [isTwitterCropped, setIsTwitterCropped] = useState(true);\n  const [buildCount, setBuildCount] = useState(3);\n  const [isGettingNFTS, setIsGettingNFTs] = useState(false);\n  const [nftList, setNftList] = useState([]);\n  const [coffeeCount, setCoffeeCount]     = useState(null);\n  const [solCount, setSolCount]           = useState(null);\n  const [barista, setBarista]             = useState(null);\n  const [coffeeOpen, setCoffeeOpen]       = useState(false);\n\n  // Sol Stuff\n  const LAMPORT_COST = 0.000000001\n  const numFromRust = (num) => \n  {\n    return num.toNumber();\n  }\n  const numToRust = (num) => \n  {\n    return new BN(Math.round(num));\n  }\n  \n  const solTolamports = (sol) => {\n    return Math.round(sol / LAMPORT_COST);\n  }\n\n  const lamportsToSol = (lamports) => {\n    return parseFloat((lamports * LAMPORT_COST).toFixed(5));\n  }\n\n  // Actions \n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  const loadCoffeeJar = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      console.log(\"🧮 Tabulating Info...\");\n      const account = await program.account.coffeeJar.fetch(coffeeJar.publicKey);\n\n      setCoffeeCount(account.coffeeCount.toNumber());\n      setSolCount(lamportsToSol(account.lamportCount));\n      setBarista(account.barista.toString());\n\n    } catch (error) {\n      console.log(\"Error getting coffee jar\", error);\n\n      setCoffeeCount(null);\n      setSolCount(lamportsToSol(null));\n      setBarista(null);\n    }\n  }\n\n  const buyCoffee = async (sol) => {\n    if(sol){\n      try {\n        const provider = getProvider();\n        const program = new Program(idl, programID, provider);\n\n        console.log(\"💲 Buying 0.1 Coffee...\");\n        await program.rpc.buyCoffee(\n          numToRust(solTolamports(0.1)),\n          {\n            accounts: {\n              coffeeJar: coffeeJar.publicKey,\n              from: provider.wallet.publicKey,\n              to: barista,\n              systemProgram: SystemProgram.programId,\n            },\n            signers: [provider.wallet.Keypair]\n          }\n        );\n\n        await loadCoffeeJar();\n      } catch (error) {\n        console.log(\"Error sending sol \", error);\n      }\n    }\n  }\n\n  const createCoffeeJar = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      console.log(\"☕ Brewing Coffee...\")\n      await program.rpc.startCoffeeJar({\n        accounts: {\n          coffeeJar: coffeeJar.publicKey,                //Web  keypair\n          barista: provider.wallet.publicKey,             //User keypair\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [coffeeJar, provider.wallet.Keypair], //even though the barista is the payer, the coffeejar needs to sign this\n      });  \n\n      await loadCoffeeJar();\n    } catch (error) {\n      console.log(\"Cannot get base account: \", error);\n    }\n  }\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            'Connected with Public Key:',\n            response.publicKey.toString()\n          );\n\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet 👻');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const connectWallet = async () => {\n    const { solana } = window;\n  \n    if (solana) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n  \n\n  // UseEffects\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n      await getCreditsLeft();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n  \n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching NFTs...');\n      \n      // Call Solana program here.\n      loadCoffeeJar();\n      grabAllNFTs();\n  \n      // Set state\n      // setGifList(TEST_GIFS);\n    }\n  }, [walletAddress]);\n\n  // COFFEE\n  const buyACoffeeForCoach = () => {\n    handleClickOpen();\n\n    // if(walletAddress == null) {\n    //   connectWallet();\n    // } else if(coffeeCount == null){\n    //   createCoffeeJar();\n    // } else {\n    //   handleClickOpen();\n    // }\n  }\n\n  const buy1Coffee = () => {\n    buyCoffee(0.1);\n  }\n\n  // Web Stuff\n  const getURLData = (baseURL = '', path = '', params = {}) => {\n    let requestedURL = baseURL + path + ((params.length == 0) ? \"\" : \"?\" + querystring.stringify(params));\n    return new Promise((resolve, reject) => {\n      fetch(requestedURL, {\n        method: 'GET',\n        cache: 'no-cache',\n        headers: {'accept': 'application/json'},\n        redirect: 'follow',\n        referrerPolicy: 'no-referrer',\n      }).then((response) => {\n        response.json().then((data)=>{\n          resolve(data);\n        })\n        .catch((error) => {reject(`Could not get JSON (${requestedURL})`);});\n      })\n      .catch((error) => {reject(`Could not get URL (${requestedURL})`);});\n    });\n  }\n\n  const grabAllNFTs = () => {\n    if(!isGettingNFTS){\n      setIsGettingNFTs(true);\n      getURLData(\n        \"https://public-api.solscan.io\",\n        \"/account/tokens\",\n        { account: `${walletAddress}`,},\n      ).then((data) => {\n\n        //Grab NFT Tokens\n        let promises = [];\n        data.forEach(token => {\n          if(token.tokenAmount != null && token.tokenAmount.amount == 1 && token.tokenAmount.decimals == 0){\n            promises.push(\n              getURLData(\n                \"https://public-api.solscan.io\",\n                `/account/${token.tokenAddress}`,\n              )\n            );\n          }\n        });\n\n        // Get Metadata on all\n        Promise.all(promises)\n        .then((nfts)=>{\n          \n          //Grab only the useful stuff\n          let nftMetadata = [];\n          nfts.forEach(nft=> {\n            try{\n              if(nft.metadata == null){throw new Error('No metadata');}\n              if(nft.metadata.data.name == null){throw new Error('No name!');}\n              if(nft.metadata.data.collection == null && nft.tokenInfo.symbol == null){throw new Error(nft.metadata.data.name + \" Bad collection\");}\n              if(nft.metadata.data.image == null){throw new Error(nft.metadata.data.name + \" Bad image\");}\n              if(nft.account == null){throw new Error(nft.metadata.data.name + \" Bad account\");}\n\n              //Fuck Collections\n              let collection = null;\n              if(nft.metadata.data.collection != null){\n                if(typeof nft.metadata.data.collection === 'string'){\n                  collection = nft.metadata.data.collection;\n                } else {\n                  collection = nft.metadata.data.collection.name;\n                }\n              }\n              if(collection == null) collection = nft.tokenInfo.symbol;\n              if(collection == null) throw new Error(nft.metadata.data.name + \" Bad collection... Again\");\n\n              nftMetadata.push(\n                {\n                  name : nft.metadata.data.name, \n                  collection : collection,\n                  url : nft.metadata.data.image,\n                  address : nft.account,\n                }\n              );\n            } catch (error){\n              console.log(error);\n            }\n          });\n\n          //Sort\n          nftMetadata.sort((a, b)=>{\n            return a.collection.localeCompare(b.collection);\n          });\n\n          //Update\n          setNftList(nftMetadata);\n          setIsGettingNFTs(false);\n        })\n        .catch((error) => {\n          alert('Could not grab ALL NFTs');\n          console.log(error);\n          setIsGettingNFTs(false);\n        })\n\n      })\n      .catch((error) => {\n        alert('Could not grab NFTs');\n        console.log(error);\n        setIsGettingNFTs(false);\n      })\n    } else {\n      console.log(\"Crawling...\")\n    }\n  }\n\n  const getCreditsLeft = async () => {\n    try {\n      const response = await fetch(`${SERVER_PATH}/credits`);\n      const data = await response.json();\n      setCreditsLeft(data.credits);\n    } catch {\n      console.log(\"Could not grab credits\");\n    }\n  }\n\n  const nukeIMG = async () => {\n    try {\n      const response = await fetch(`${SERVER_PATH}/nuke/${walletAddress}`);\n      const data = await response.json();\n      console.log(data);\n    } catch {\n      console.log(\"Could not nuke img\");\n    }\n  }\n\n  const isChosenMek = (nft) => {isChosenImg(nft, mekAddress)}\n  const isChosenPFP = (nft) => {isChosenImg(nft, pfpAddress)}\n  const isChosenImg = (nft, slot) => {\n    if(slot == null) return false;\n    if(nft == null) return false;\n    return nft.address == slot.address;\n  }\n\n  const getMekaName = () => {\n    let mek = (mekAddress == null) ? null : mekAddress.name;\n    let pfp = (pfpAddress == null) ? null : pfpAddress.name;\n\n    let name = (mek == null) ? ' ' : 'Meka-';\n    name += (pfp == null) ? ' ' : pfp.split(' ')[0];\n    return name;\n  }\n\n  const downloadNewMek = async () => {\n    if(creditsLeft <= 0){\n      alert('No more community credits! Tweet @Coach Chuck to request more');\n    } else if(buildCount <= 0){\n      alert('No more builds! (But... you could refresh...)');\n    } else if(mekAddress == null || pfpAddress == null){\n      alert('Need to pick both a Mekamount and PFP');\n    } else if(!isBuilding){\n      setIsBuilding(true);\n      try {\n        const response = await fetch(`${SERVER_PATH}/sol/${walletAddress}/meka/${mekAddress.address}/mekaflip/${isMekFlipped}/pfp/${pfpAddress.address}/pfpflip/${isPfpFlipped}/twittercrop/${isTwitterCropped}/scale/${pfpScale}`);\n        const blob = await response.blob();\n\n        if(blob.size < 500){\n          const data = await response.json();\n          if(data.error != null){\n            alert(data.error);\n          } else {\n            alert('Error merging NFTs');\n          }\n        } else {\n          download(blob, getMekaName() + \".png\");\n          setBuildCount(buildCount - 1);\n          getCreditsLeft();\n          nukeIMG();\n        }\n\n      } catch (error) {\n        alert('Error merging NFTs');\n      }\n\n      setIsBuilding(false);\n    } else {\n      alert('Building...');\n    }\n  };\n\n  // Popups\n  const handleClickOpen = () => {\n    setCoffeeOpen(true);\n  };\n\n  const handleClose = () => {\n    setCoffeeOpen(false);\n  };\n\n  function BuyCoachACoffeePopup(props) {\n    const { onClose, open } = props;\n\n    const handleClose = () => {\n      onClose();\n    };\n  \n    return (\n      <Dialog onClose={handleClose} open={open} theme={muiTheme}>\n        <DialogTitle>Buy Coach A Coffee!</DialogTitle>\n        <Button variant=\"contained\">XXX</Button>\n      </Dialog>\n    );\n  }\n\n  BuyCoachACoffeePopup.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onOpen: PropTypes.bool.isRequired,\n  };\n\n  // Renders\n  const selectNFT = (nft) => {\n\n    if(nft.name.includes(\"Mekamounts\")){\n      setMekAddress(nft);\n    } else {\n      setPfpAddress(nft);\n    }\n    \n  }\n\n  const mekSort = (nft) => {return nft.name.includes(\"Mekamounts\");}\n  const pfpSort = (nft) => {return !nft.name.includes(\"Mekamounts\");}\n  const getPFPList = (sortFunction) => {return nftList.filter(sortFunction);}\n\n  const renderNFTContainer = () => (\n    <div>\n      <a href='https://www.magiceden.io/marketplace/mekamounts'><p className=\"file-name\">{getPFPList(mekSort).length > 0 ? \"Choose your Mekamount...\" : \"You have no Mekamounts... \"}</p></a>\n      <div className=\"gif-grid\">\n        {getPFPList(mekSort).map((nft) => (\n          <div className={\"gif-item\"} key={nft.url} onClick={() => {selectNFT(nft)}}>\n            <div className='overlay'>\n              <img src={nft.url} alt={nft.url}/>\n              <div className={(mekAddress == null) ? 'selection-overlay' : ((mekAddress.address != nft.address) ? 'selection-overlay' : 'selected')}></div>\n            </div>\n            <p className=\"sub-text\">{nft.name}</p>\n            <div className='mini-spacing'></div>\n          </div>\n        ))}\n      </div>\n      <a href='https://www.magiceden.io/marketplace/pesky_penguins'><p className=\"file-name\">{getPFPList(pfpSort).length > 0 ? \"Choose your PFP...\" : \"You have no PFPs...\"}</p></a>\n      <div className=\"gif-grid\">\n        {getPFPList(pfpSort).map((nft) => (\n          <div className={\"gif-item\"} key={nft.url} onClick={() => {selectNFT(nft)}}>\n            <div className='overlay'>\n              <img src={nft.url} alt={nft.url}/>\n              <div className={(pfpAddress == null) ? 'selection-overlay' : ((pfpAddress.address != nft.address) ? 'selection-overlay' : 'selected')}></div>\n            </div>\n            <p className=\"sub-text\">{nft.name}</p>\n            <div className='mini-spacing'></div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  const renderLoadingContainer = () => (\n    <p className=\"file-name\">Loading NFTs...</p>\n  );\n\n  const renderTwitterCropSwitch = () => (\n    <div className=\"toggle-switch\">\n      <p>Crop for Twitter [{`${isTwitterCropped}`}]</p>\n      <label className=\"switch\">\n        <input \n          type=\"checkbox\" \n          checked={isTwitterCropped}\n          onChange={()=>setIsTwitterCropped(!isTwitterCropped)}\n        />\n        <span className=\"slider round\"></span>\n      </label>\n    </div>\n  );\n\n  const renderConnectedContainer = () => (\n    <div className=\"connected-container\">\n        <div className=\"selected-grid\">\n        {<div className=\"selected-item\" key={\"meka\"}>\n          <div className='flip-container' onClick={() => {setIsMekFlipped(!isMekFlipped);}}>\n            <div className={isMekFlipped ? 'is-flipped' : 'can-flip'}>\n              <img src={mekAddress == null ? mekaHolder : mekAddress.url} alt={mekaHolder} />\n              <p className=\"sub-text\">{mekAddress == null ? \"\" : \"Mekamount\"}</p>\n            </div>\n          </div>\n        </div>}\n        {<div className=\"selected-item\" key={\"pfp\"}>\n        <div className='flip-container' onClick={() => {setIsPfpFlipped(!isPfpFlipped);}}>\n            <div className={isPfpFlipped ? 'is-flipped' : 'can-flip'}>\n              <img src={pfpAddress == null ? pfpHolder : pfpAddress.url} alt={pfpHolder} />\n              <p className=\"sub-text\">{pfpAddress == null ? \"\" : \"PFP\"}</p>\n            </div>\n          </div>\n        </div>}\n      </div>\n      <div className='mini-spacing'></div>\n      <p className=\"sub-text file-name\">{(mekAddress == null || pfpAddress == null) ? getMekaName() : getMekaName()}</p>\n      {renderTwitterCropSwitch()}\n      <button type=\"submit\" className=\"cta-button submit-gif-button\" onClick={downloadNewMek} disabled={isBuilding}>\n        {(isBuilding ? `Building...` : `Build [${buildCount}]`)}\n      </button>\n      <div className='spacing'></div>\n      <p className=\"sub-text\">Hello {walletAddress}</p>\n      {(isGettingNFTS) ? renderLoadingContainer() : renderNFTContainer()}\n      <div className='spacing'></div>\n    </div>\n  );\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  // Main Page\n  return (\n    <div className=\"App\">\n\t\t\t{/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"header-container\">\n          <p className=\"header\">🦾 Mekamount PFP Portal 🐦</p>\n          <p className=\"header\">[CR Left: {creditsLeft}]</p>\n          <p className=\"sub-text\">\n            N F T ✨\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {/* We just need to add the inverse here! */}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className='spacing'></div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`Crafted By @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n      <div className='fab'>\n        <Fab color=\"primary\" aria-label=\"add\" theme={muiTheme} onClick={buyACoffeeForCoach}>\n          <FontAwesomeIcon icon={faCoffee} size=\"lg\"/>\n        </Fab>\n      </div>\n      <BuyCoachACoffeePopup\n        open={coffeeOpen}\n        onClose={handleClose}\n      />\n    </div>\n  );\n};\n\nexport default App;"]},"metadata":{},"sourceType":"module"}